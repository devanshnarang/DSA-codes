//pointers/*data-type*pointers_name-to store address of a variable&-it is called address of operator.It fetches us a hexadecimal value.pointers can store addressesdereference operator-cout<<*ptr *///swap variables/*#include<iostream>using namespace std;void swapvar(int *x,int *y){    int temp=*x;    *x=*y;    *y=temp;}int main(){    int x=3;    int y=5;    int *p1=&x;    int *p2=&y;    swapvar(p1,p2);    cout<<x<<"   "<<y;    return 0;}*///for a given string print first and last occurence of given character/*#include<iostream>using namespace std;void indexing(string s, char ch,int *pf,int *pl){    for (int i = 0; i < s.size(); i++)    {        if (s[i]==ch)        {            *pf=i;            break;        }    }    for (int i = s.size()-1; i >=0; i--)    {        if (s[i]==ch)        {            *pl=i;            break;        }            }        }int main(){    string s="narang";    char ch='a';    int first=-1;    int last=-1;    int *pf=&first;    int *pl=&last;    indexing(s,ch,pf,pl);    cout<<*pf<<"    "<<*pl;
    return 0;}*///pointer arithmetic/*increment of a pointer value refers to shift in memoryocation that pointer is pointing to.shift is dependent ofsize of the type of variable*///arrays as pointers#include<iostream>using namespace std;int main(){    int ar[4]={1,2,3,4};    int (*p)[4]=&ar;    cout<<*p<<endl;//it gives address of array    return 0;}//*(ar+1) gives acces to value at index 1 in the given array

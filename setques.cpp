// //Question 1// // #include<iostream>// // #include<set>// // using namespace std;// // int main(){// //     int N;// //     cin>>N;// //     set<string> names;// //     for (int i = 0; i < N; i++)// //     {// //         string name;// //         cin>>name;// //         names.insert(name);// //     }// //     set<string>::iterator itr;// //     for (itr=names.begin(); itr != names.end(); itr++)// //     {// //         cout<<*itr<<" ";// //     }// //     return 0;// // }// //adding common elements// // #include<iostream>// // #include<stack>// // using namespace std;// // int main(){// //     int n,m;// //     cin>>n>>m;// //     vector<int> v1(n);// //     vector<int> v2(m);// //     cout<<"Enter elements of v1:"<<endl;// //     for (int i = 0; i < n; i++)// //     {// //         cin>>v1[i];// //     }// //     cout<<"Enter elements of v2:"<<endl;// //     for (int i = 0; i < m; i++)// //     {// //         cin>>v2[i];// //     }// //     int ans_sum=0;// //     set<int> s1;// //     for(auto ele:v1){// //         s1.insert(ele);// //     }// //     for(auto ele:v2){// //         if (s1.find(ele)!=s1.end())// //         {// //             ans_sum+=ele;// //         }  // //     }// //     cout<<ans_sum<<endl;// //     return 0;// // }// #include<iostream>// #include<set>// bool checkAllAlphabets(string s){//     if (s.length()<26)//     {//         return false;//     }//     //transform(input first iterator,result first iterator,result last iterator,operation to be performed)//     transform(s.begin(),s.end(),s.begin(),s.end(),::tolower);//     set<char> alphabets;//     for (auto ch:s)//     {//         alphabets.insert(ch);//     }//     return (alphabets.size()==26)        // }// using namespace std;// int main(){//     string input;//     cin>>input;//     if (checkAllAlphabets(input))//     {//         cout<<"YES"<<endl;//     }//     else{//         cout<<"NO"<<endl;//     }    //     return 0;// }//for unordered set// #include<iostream>// #include<unordered_set>// using namespace std;// int main(){//     unordered_set<int> s1;//     s1.insert(3);//     s1.insert(1);//     s1.insert(2);//     s1.insert(1);//     for(auto ele:s1){//         cout<<ele<  <" ";//     }//     return 0;// }//for unordered multi set// #include<iostream>// #include<unordered_set>// using namespace std;// int main(){//     unordered_multiset<int> ms1;//     ms1.insert(4);//     ms1.insert(8);//     ms1.insert(3);//     ms1.insert(1);//     ms1.insert(4);//     for(auto ele:ms1){//         cout<<ele<<" ";//     }//     return 0;// }// #include<iostream>// #include<set>// #include<vector>// using namespace std;// int main(){//     int n;//     cin>>n;//     vector<int> temp(n);//     for (int i = 0; i < n; i++)//     {//         cin>>temp[i];//     }//     set<int> ans;//     for(auto ele:temp){//         ans.insert(ele);//     }//     auto itr=ans.begin();//     advance(itr,1);//     cout<<*itr<<endl;//     return 0;// }#include<iostream>#include<unordered_set>using namespace std;int main(){    int n,p,q;    cin>>n>>p>>q;    unordered_set<int> s;    for (int i = 0; i <= n; i++)    {        for (int j = 0; j <=n ; j++)        {            int correct=i;            int incorrect=j;            int unattended=n-(i+j);            if (unattended>=0)            {                int score=correct*p+incorrect*q;                s.insert(score);            }else{                break;            }                    }      }    cout<<s.size()<<endl;        return 0;}
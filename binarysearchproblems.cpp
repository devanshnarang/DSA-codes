/*#include<iostream>
#include<vector>
using namespace std;
int lastoccurence(vector<int> &arr,int target){    
    int lo=0;    
    int hi=arr.size()-1;    
    int ansb=-1;    
    while(lo<=hi){        
        int mid=lo+(hi-lo)/2;        
        if(arr[mid]==target){            
            ansb=mid;            
            lo=mid+1;        }        
        else if(arr[mid]>target){           
             hi=mid-1;        
        }       
        else{            
            lo=mid+1;        
        }    
    }    
    return ansb;}int firstoccurence(vector<int> &arr,int target){    int lo=0;    int hi=arr.size()-1;    int ansa=-1;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        if(arr[mid]==target){            ansa=mid;            hi=mid-1;        }        else if(arr[mid]>target){            hi=mid-1;        }        else{            lo=mid+1;        }    }    return ansa;}int main(){    vector<int> arr{1,2,3,3,3,5,11};    int target=3;    int ans[2];    ans[0]=firstoccurence(arr,target);    ans[1]=lastoccurence(arr,target);    cout<<ans[0]<<"  "<<ans[1]<<endl;    return 0;}*//*#include<iostream>#include<vector>using namespace std;int lowestoccurence(vector<int> &v){    int lo=0;    int hi=v.size()-1;    if (v[lo]<v[hi])    {        return lo;    }        while(lo<=hi){        int mid=lo+(hi-lo)/2;        if (v[mid]<v[mid-1])        {            return mid;        }        if (v[mid]>v[mid+1])        {            return (mid+1);        }        if (v[mid]>v[lo])        {            lo=mid+1;        }        else{            hi=mid-1;        }            }        }int main(){    vector<int> v(6);    for (int i = 0; i < 6; i++)    {        cin>>v[i];    }    cout<<"now"<<endl;        cout<<lowestoccurence(v);    return 0;}*//*#include<iostream>#include<vector>using namespace std;int giveindex(vector<int> &v,int fin,int lo,int hi){    cout<<"fin";
        while(lo<=hi){        int mid=lo+(hi-lo)/2;        if (v[mid]==fin)        {            return mid;        }        if (v[lo]==fin)        {            return lo;        }        if (v[hi]==fin)        {            return hi;        }        if (v[mid]<fin)        {            if(v[lo]>fin){                lo=mid+1;                }            else{                hi=mid-1;            }        }        else{            if (v[lo]>fin)            {                lo=mid+1;}            else{                hi=mid-1;            }        }    }
            }int main(){    int n;    cin>>n;    vector<int> v(n);    for (int i = 0; i < n; i++)    {        cin>>v[i];    }    cout<<"exe";        int target=4;    cout<<giveindex(v,target,0,n-1)<<endl;    return 0;}*//*#include<iostream>#include<vector>using namespace std;int peakindex(vector<int> &v){    int lo=0;    int hi=v.size()-1;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        if ((v[mid]>v[mid+1])&&(v[mid]>v[mid-1]))        {            return mid;        }        if (v[mid+1]>v[mid])        {            lo=mid+1;        }        else{            hi=mid-1;        }                    }}int main(){    int n;    cin>>n;    vector<int> v(n);    for (int i = 0; i < n; i++)    {        cin>>v[i];    }    cout<<peakindex(v);        return 0;}*//*#include<iostream>#include<vector>using namespace std;int firstpeakindex(vector<int> &v){    int ans=-1;    int lo=0;    int hi=v.size()-1;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        if(mid==0){            if(v[mid]>v[mid+1]){                return 0;            }            else{                return 1;            }        }        else if(mid==hi){            if(v[mid]>v[mid-1]){                return hi;            }            else{                return hi-1;            }        }        else{            if(v[mid]>v[mid-1]&&v[mid]>v[mid+1]){                return mid;}                    else if (v[mid]>v[mid-1])            {                lo=mid+1;            }            else{                hi=mid-1;            }                        }    }}int main(){    int n;    cin>>n;    vector<int> v(n);    for (int i = 0; i < n; i++)    {        cin>>v[i];    }    cout<<firstpeakindex(v);        return 0;}*///to find given element in a given 2d array/*#include<iostream>#include<vector>using namespace std;bool searchmatrix(vector<vector<int>> &arr,int target){    int n=arr.size();    int m=arr[0].size();    int hi=((n*m)-1);    int lo=0;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        int x=mid/m;        int y=mid%m;        if (arr[x][y]==target)        {            return true;        }                if (arr[x][y]<target)        {            lo=mid+1;        }        else{            hi=mid-1;        }    }    return false;    }int main(){    int n,m;    int target;    cin>>n>>m;    cin>>target;    vector<vector<int>> arr[n][m];    for (int i = 0; i < n; i++)    {        for (int j = 0; j < m; j++)        {            cin>>arr[i][j];        }            }    cout<<searchmatrix(arr,target);        return 0;}*///CHOCOLATE DISTRIBUTION PROBLEM/*#include<iostream>#include<vector>using namespace std;bool candistchoco(vector<int> &v,int mid,int s){    int n=v.size()    int studentreqd=1;    int sum=0;    for (int i = 0; i < n; i++)    {        if (v[i]>mid)        {            return false;        }        if (sum+arr[i]>mid)        {            studentreqd++;            sum=arr[i];            if (studentreqd>s)            {                return false;            }        }else{            sum+=arr[i];        }          }    return true;    }int distributechocolates(vector<int> &v,int s){    int n=v.size();    int lo=v[0];    int hi=0;    for (int i = 0; i < n; i++)    {        hi+=v[i];    }    int ans=-1;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        if (candistchoco(v,mid,s))        {            ans=mid;            hi=mid-1;        }        else{            lo=mid+1;        }            }    return ans;    }int main(){    int n;    cin>>n;    vector<int> v(n);    for (int i = 0; i < n; i++)    {        cin>>v[i];    }        return 0;}*///kids racing track/*#include<iostream>#include<vector>int canplacestudents(vector<int> &pos,int s,int mid){    int studentreqd=1;    int lastplace=pos[0];    for (int i = 0; i < pos.size(); i++)    {        if ((pos[i]-lastplace)>=mid)        {            studentreqd++;            lastplace=pos[i];            if (studentreqd==s)            {                return true;            }                    }            }    return false;    
// }int race(vector<int> &pos,int s){    int n=pos.size();    int lo=1;    int hi=pos[n-1]-pos[0];    int ans=-1;    while(lo<=hi){        int mid=lo+(hi-lo)/2;        if(canplacestudents){            ans=mid;            lo=mid+1;        }        else{            hi=mid-1;        }    }    return}using namespace std;int main(){
//     return 0;}*/
/*recursion-in recursion we try to solve a bigger problem by finding out solutions to smaller sub problems.we represent these problems in the from of functions and these function calls itself to solve smaller sub problems.Principal of mathematical Induction-#base casee-case for which value is already known to us.assumption-we assume formula correct for N=k we can prove that it also works for N=k+1 and so onself work-proving that sum of k+1 terms is correct using we already know sum of k terms.
to find value a call stack is created in the memory,and then as problem is sub divided into smaller sub problems a stack frame is created for each recursion of the sub problem.time complexity-O(n)space complexity-O(n)-as iterating n times(n stack frames are created in memory)space gets introduced due to call stack.iterative code uses less space complexity.*//*#include<iostream>using namespace std;int fib(int i){    if(i==0){        return 0;    }    else if(i==1){        return 1;    }    int ans=fib(i-2)+fib(i-1);    return ans;}int main(){    int n;    cin>>n;    int x=fib(n);    cout<<x;    return 0;}*//*#include<iostream>using namespace std;int sum(int n){    if(n>=0 && n<=9){        return n;    }    int ans=(n%10)+sum(n/10);    return ans;}int main(){    int x;    cin>>x;    int a=sum(x);    cout<<a;    return 0;}*//*#include<iostream>using namespace std;int power(int x,int y){    if(y==0){        return 1;    }    int ans=x*power(x,y-1);    return ans;}int main(){    int p,q;    cin>>p>>q;    int pow=power(p,q);    cout<<pow;    return 0;}*//*#include<iostream>using namespace std;void prin(int *arr,int g,int id){    if(id=g){        return ;    }    cout<<arr[id]<<endl;    prin(arr,g,id+1);}int main(){    int N;    cin>>N;    int arr[N];    for (int i = 0; i < N; i++)    {        cin>>arr[i];    }    int idx=0;    cin>>idx;    prin(arr,N,idx);        return 0;}*//*#include<iostream>#include<string>using namespace std;string f(string &s,int idx,int n){    if(idx==n){        return "";    }    string curr="";    curr+=s[idx];    return((s[idx]=='a')?"":curr)+f(s,idx+1,n);}int main(){    string s="abcax";    f(s,0,s.length())    return 0;}*/#include<iostream>using namespace std;string palindrome(int x){    }int main(){    int N;    cin>>N;    palindrome(N);    return 0;}